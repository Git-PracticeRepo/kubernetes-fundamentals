

not done:
lab 3
section 4.10, kubeadmin
labs: https://github.com/kelseyhightower/kubernetes-the-hard-way

chapter 3

kubernetes networking demo
https://github.com/containernetworking/cni
see scripts directory, e.g. docker-run.sh

kubectl, kubernetes client

www.weave.works/docs/net/latest/kube-addon

vi /lib/systemd/system/kubelet.service

configured network directory in /etc/cni

network isolation between namespaces
kubernetes.io/docs/concepts/cluster-administration/addons


knowledge check
3.15a the kubernetes head node runs an api server
true
3.15b kubernetes nodes run the scheduler
false
3.15c pods are single container compute units
false

chapter 4

4.6 Using minikube

install kubernetes client:

    sudo dnf install kubernetes-client

install minikube:

    curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

start a virtualbox virtual machine which contains a single node kubernetes deployment and the docker engine:

    start minikube

display resources:

    kubectl get nodes

display pods:

    kubectl get pods

display pod log

    kubectl logs <pod name>

display deployments

    kubectl get deployments

display services

    kubectl get svc

describe a service

    kubectl describe svc <service name>

services expose application to outside

can get a list of minikube commands with the minikube command

picking the right solution for a kubernetes setup:
https://kubernetes.io/docs/setup/pick-right-solution/

kubernetes api server
https://kubernetes.io/docs/admin/kube-apiserver/

single ip for each pod for kubernetes cluster

get kubernetes service ip with
    minikube ip
get port number with following command, use NodePort number
    kubectl describe svc <service name>



knowledge check
4.19.a
Minikube is a single-node local Kubernetes environment
True

4.19.b
Minikube does not contain the Kubernetes dashboard
False

4.19.c
kubeadm is a command line tool to create Kubernetes users
False

4.19.d
Kubernetes can be installed with any configuration management tool
True

4.19.e
hyperkube allows us to run etcd
False


chapter 5

get status of minikube

    minikube status

get inside minikube virtual machine and curl the api endpoint ( $ indicates command inside minikube vm)

    minikube ssh
    $ curl http://127.0.0.1:8080
    # or curl http://localhost:8080

documentation on kubernetes api groups:
https://kubernetes.io/docs/concepts/overview/kubernetes-api/

list api endpoint resources name, kind and other metadata:

    $ curl http://127.0.0.1:8080<api endpoint>

metadata conventions:
https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md

api conventions:
https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md

pod is lowest compute unit in kubernetes

resource state is changed with http verbs (get, post, patch, delete etc)

namespaces intended to isolate multiple groups/teams and give them access to a set of resources. avoid name collisions between resources

get list of namespaces

    kubectl get ns

create a namespace

    kubectl create ns <namespacename>

get metadata about namespace

    kubectl get ns/<namespacename> -o yaml # or json instead of yaml, -o flag specifies output type

delete namespace

    kubectl delete ns/<namespacename>

show resource

    kubectl get <resourcename>

access the minikube dashboard

    minikube dashboard

click on +create in upper right corner to create new application

list pods that are running

    kubectl get pods

list information about specific pod

    kubectl logs <pod name>  # can use tab autocompletion


can access application running in container via exec

    kubectl exec -ti redis-3215927958-l626t bash    # exit with exit command

get all pods in all namespaces

    kubectl get pods --all-namespaces

5.13 api demonstrating namespace usage


5.14.a
The Kubernetes API is XML/SOAP-based
False

5.14.b
All Kubernetes resources contain metadata
True

5.14.c
The Kubernetes API follows the OpenAPI specification
True


chapter 6


pod represents group of co-located containers and associated volumes. top level api object to run containers, and smallest compute unit in kubernetes

pod documentation
https://kubernetes.io/docs/api-reference/v1.6/#pod-v1-core

user-guide on pods
https://kubernetes.io/docs/concepts/workloads/pods/pod/

replication controllers

create deployment with single container per pod

    kubectl run nginx --image=nginx

    kubectl get deployments,pods

should use deployments instead of replication controllers

creating a deployment with kubectl run adds label to pod

query deployments by label

    kubectl get pods -l run=<labelname>

can add pod names on the fly

    kubectl label pods <podname> <smthing>=<smelse>

show deployments
    kubectl get deployments

show replica sets
    kubectl get rs

show pods
    kubectl get pods


scale deployment

    kubectscale deployment/nginx --replicas=<nr of replicas>


delete pod

    kubectl delete pod <podname>

kubectl set command added in version 1.3


knowledge check

6.14.a
What kind of resource definitions does Kubernetes use: declarative or imperative?
Declarative
6.14.b
Replica Sets are the new Replication Controllers you should use
True
6.14.c
Deployments and Replication Controllers can be scaled
True
6.14.d
With Deployments, you can roll back to a specific revision
True

chapter 7

pod specification
https://kubernetes.io/docs/api-reference/v1.7/#podspec-v1-core

volumes
https://kubernetes.io/docs/api-reference/v1.7/#volume-v1-core

container
https://kubernetes.io/docs/api-reference/v1.7/#container-v1-core

run kubernetes pod with yaml file specification with following:

    kubectl create -f <file.yaml>


persistent volume provisioning

    https://github.com/kubernetes/kubernetes/tree/master/examples/persistent-volume-provisioning

get secrets

    kubectl get secrets

get help on create secret command

    kubectl create secret generic --help

create base64 encoded secret called mysql from the word root

    kubectl create secret generic mysql --from-literal=password=root

get info on the mysql secret

    kubectl get secrets mysql -o yaml

configmap used to pass configuration data to pod


deleting a pod

    kubectl delete pods <podname>

open question from lab7, part 1: how to add text to file, eg
kubectl exec -ti vol -c box -- echo "hello" >> /box/lfs222
answer: use configmaps instead

knowledge check
7.15.a
You cannot share the same volume between two containers in a pod
False

7.15.b
Dynamic provisioning allows you to create secrets dynamically for sensitive applications
False

7.15.c
You can use persistent storage in Kubernetes
True

7.15.d
A configMap resource allows you to:
Store configuration files and make them available in pods

7.15.e
Secrets can be created with the following command:
kubectl create secret


chapter 8 services

how to expose container services to outside world

create service at port 80

    kubectl expose deployment/nginx --port=80 --type=NodePort

show available services

    kubectl get svc

print information about the service

    kubectl get svc nginx -o yaml

delete service

    kubectl delete svc <servicename>

access a service via the browser

    minikube service <servicename>


knowledge check

8.12.a
A service is a static public IP address for a pod
False

8.12.b
The Kubernetes DNS add-on provides a DNS name resolution for services
True

8.12.c
NodePort is a service type that provides a high random port externally accessible from your cluster
True

8.12.d
For debugging, you can access internal services using the kubectl proxy command
True


Chapter 9

Ingress is a set of rules that allow inbound connections to reach the cluster service

With ingress have a proxy running in the cluster, and the proxy can be reprogrammed by creating ingress rules.

get ingress rules with

    kubectl get ingress

service name in BACKEND column

edit ingress with

    kubectl edit ingress <ingress_name>

delete ingress with

    kubectl delete ingress <ingress_name>

nginx ingress controller: https://github.com/kubernetes/ingress/tree/master/controllers/nginx

ingress: https://github.com/kubernetes/ingress

example on how to deploy ingress controller: https://github.com/kubernetes/ingress/tree/master/examples/deployment/nginx

start ghost deployment
    kubectl run ghost --image=ghost
    kubectl expose deployments ghost port=2368


ClusterIP service type, created by default if type not specified, cannot be reached from the outside
NodePort and load balancer can be reached from outside
ClusterIP should only be reachable internally to the cluster, but can gain external access to it via an ingress controller

With ingress can define rules for traffic to internal services

nip.io is wildcard service which will automatically resolve to the internal Minikube IP

knowledge check

9.9.a
What does the Ingress Controller allow you to do?
Implement Layer 7 rules to reach your services

9.9.b
Ingress Controllers are proprietary
False

9.9.c
An ingress rule is a Kubernetes resource
True

Chapter 10

api resources

HPA - Horizontal Pod Autoscalers
scale replication controllers or deployments based on cpu usage

$curl localhost:8080/apis/autoscaling/v1

documentation about autoscaler

    kubectl autoscale --help

daemon sets

role defining resources

$ curl localhost:8080/apis/rbac.authorization.k8s.io/v1alpha1 


knowledge check

10.10.a
RBAC APIs are stable APIs
false

10.10.b
DaemonSets are used to run one pod per cluster
False

10.10.c
Jobs can run pods in parallell
True

10.10.d
All API resource specifications contain the following:
a) Kind
b) Metadata
c) apiVersion
-> d) All of the above  ; correct


if get this error:

    Could not find finalized endpoint being pointed to by kubernetes-dashboard: Error validating service: Error getting service kubernetes-dashboard: Get https://192.168.99.100:8443/api/v1/namespaces/kube-system/services/kubernetes-dashboard: dial tcp 192.168.99.100:8443: getsockopt: no route to host


do

    sudo ifconfig vboxnet0 up

source: https://github.com/kubernetes/minikube/issues/1224


Chapter 11

scheduling


start a kubernetes cluster

    minikube start

To find a node that can run a pod, the scheduler goes through a set of filters to find available nodes, and then ranks them. The node with the highest rank is selected to run the pod.

The filtering is done via a set of policies called predicates. And the ranking is done via a set of priority functions.

Kubernetes scheduling algorithm description
https://github.com/kubernetes/community/blob/master/contributors/devel/scheduler_algorithm.md

scheduling can be influenced via pod specification
details of specification api
https://kubernetes.io/docs/api-reference/v1.6/#pod-v1-core

scheduling documentation, assigning pods to nodes
https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

affinity rules
node affinity - expression for node preferences for a pod
pod affinity - expression for the placement of pod in relation to other pods
rules can be soft or hard, thereby expressing a preference or a requirement.
more on affinity rules
https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

knowledge check

11.12a
Predicates allow you to run nodes
false

11.12b
You cannot run more than one scheduler at once in Kubernetes
false

11.12c
Which of the following does not affect the scheduling of pods?

-> hostNetwork
nodeSelector
affinity


11.12d
You can create a pod binding manually
true

11.12e
Scheduling in Kubernetes is about ________:

Dynamically provisioning storage
-> Finding a node to run a pod on
Creating random high ports for NodePort type services
Restarting the API server every 5 minutes


if get following message:
    Unable to connect to the server: dial tcp 192.168.99.100:8443: i/o timeout
the do
    sudo ifconfig vboxnet0 up

chapter 12

logging, monitoring, and troubleshooting

two monitoring systems in Kubernetes
Heapster, https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/
Prometheus, https://prometheus.io/

Heapster on Github: https://github.com/kubernetes/heapster
Heapster deployment: https://github.com/kubernetes/heapster/blob/master/docs/influxdb.md
Heapster and horizontal pod scaling: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/

Prometheus client libraries: https://prometheus.io/docs/instrumenting/clientlibs/

kubelet writes container logs to local files
can retreive logs with command
    kubectl logs

Fluentd- aggregation of logs
https://www.fluentd.org/
Using Fluntd on Kubernetes:
https://kubernetes.io/docs/tasks/debug-application-cluster/logging-elasticsearch-kibana/

troubleshooting in these materials:
https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-cluster/
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-pod-replication-controller/
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-service/

The first commands to use for quick troubleshooting are:
$ kubectl describe
$ kubectl logs
$ kubectl exec

You will find that running a troubleshooting pod is very handy. You can do this by launching a busybox pod and execing into it:
$ kubectl run busybox --image=busybox --command sleep 3600
$ kubectl exec -ti <busybox_pod> -- /bin/sh


knowledge check

12.8a
Prometheus and Fluentd are part of Cloud Native Computing Foundation.
True

12.8b
Heapster uses Prometheus.
False

12.8c
Prometheus is used for:
Billing
Quotas
Finding ancestors
-> Monitoring key metrics

12.8d
Kibana is:
A SCRUM board tool
A Tibetan practice
-> A dashboard tool
A log aggregation system


12.8e
In Minikube, you can enable Heapster addon with:
a) minikube start heapster
b) minikube enable heapster
c) minikube heapster on
-> d) minikube addons enable heapster



chapter 13

third party resource can be created with json/yaml manifest
contains following fields:
- apiVersion
- kind
- metadata, has name which is the most critical part, used to create api group and resource's short name. must have form <name>.<domain>
- description
- versions

can create api objects and api endpoints. the objects can be managed with a REST interface

need to write a custom controller to watch when new objects are created, updated or deleted

third party resources can be used to create additional automation beyond that offered by Kubernetes primitives

(writing controllers beyond course)

knowledge check


13.10.a
What are Third Party Resources?
a) Plugins for proprietary solutions
x b) New API Objects definitions
c) Resources from third-party vendors


13.10.b
Kubernetes manages CRUD operations for third-party resource:
x True
False


13.10.c
Third-party resources create a new API group:
x True
False

lab13.pdf not working


Chapter 14


Learning objectives
- discuss the principles fo a Kubernetes federation
- summarize the steps that need to be taken to create a federation
- discuss the Cluster API resource
- re-balance pods among federated clusters

linking kubernetes clusters

kubernetes federation
https://kubernetes.io/docs/tasks/federation/federation-service-discovery/

walkthrough of federation
https://github.com/kelseyhightower/kubernetes-cluster-federation

cluster federation with kubefed
https://kubernetes.io/docs/tasks/federation/set-up-cluster-federation-kubefed/

for federation control plane to be able to talk to clusters in the federation, it needs to have access to secrets that contain the kubeconfig configuration of each cluster. This configuration can be obtained locally using the --minify and --flatten options of the kubectl config view command

api resources supported in federation
- Cluster
- ConfigMap
- DaemonSets
- Deployment
- Events
- Ingress
- Namespaces
- ReplicaSets
- Secrets
- Services

up to date list
https://kubernetes.io/docs/concepts/cluster-administration/federation/

can rebalance replicas, scheduling more pods in one cluster and less in another

knowledge check
14.10.a
A federation uses the same etcd cluster as the one in the biggest cluster
True
x False

14.10.b
You can switch contexts to use a different cluster with kubectl
x True
False

14.10.c
A federated cluster exposes all the API resources of a single cluster
True
x False


14.10.d
ReplicaSets are always evenly distributed among the clusters in a federation
True
x False


chapter 15

Learning objectives: should be able to
- package your Kubernetes application
- share your packages as Charts
- templatize the application

helm - packages kubernetes applications

helm has two components
- Tiller, server which runs inside Kubernetes cluster
- Helm, client which runs on the clocal machine

a package is called a Chart

With Helm can browse package repositories that contain Charts and deploy those charts on the Kubernetes cluster. Tiller will create a release, which is an instance of a chart

Chart is an archive of a set of Kubernetes resource manifests that make up a distribute application

Charts on github
https://github.com/kubernetes/charts

templates use Go templating syntax

knowledge check
15.11.a
Helm is an SSH-based configuration management solution
True
x False


15.11.b
Chart are made of a set of templates for the manifests that make up an application
x True
False

15.11.c
The server side of Helm is called "Mast"
True
x False

15.11.d
Which of the following are valid helm commands?
x a) helm install
b) helm deinstall
x c) helm repo list
x d) helm list

Chapter 16 Security

Learning objectives
- Explain how API requests go through the system
- Compare different types of authentication
- Configure authorization rules
- Configure pod policies to control what containers are allowed to do
- Restrict network traffic using network policies


To perform any action in Kubernetes, need to access the API and go through three main steps:
- Authentication
- Authorization (ABAC or RBAC)
- Admission control

controlling access to Kubernetes
https://kubernetes.io/docs/admin/accessing-the-api/

at authorization step request is checked against existing policies

admission controllers check the actual content of objects being created and validate them before admitting the request

requests reaching API server are encrypted using TLS

authentication in Kubernetes
- authentication is done with certificates, tokens or basic authentication
- users are not created by the api, but should be managed by an external system
- system accounts are used by processes to access the api

system accounts:
https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

authentication:
https://kubernetes.io/docs/admin/authentication/#webhook-token-authentication

ABAC - Attribute Based Access Control, first authorization model in kubernetes
RBAC - Role Based Access Control, becoming default authorization model in kubernetes

RBAC policies can be defied via Kubernetes API itself

RBAC defines following API resource kinds
- Role
- ClusterRole
- Binding
- ClusterRoleBinding

RBAC documentation
https://kubernetes.io/docs/admin/authorization/rbac/#api-overview

admission controllers can access the content of the objects being created by the requests. The can modify or validate the objects, and potentially deny the request

security contexts
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

PSP - PodSecurity Policies, cluster level policies that govern what a pod can do. A pod must match a Pod Security Policy to be admitted to a Kubernetes cluster
https://kubernetes.io/docs/concepts/policy/pod-security-policy/

Network policy is a specification of how groups of pods are allowed to communicate with each other

network policies
https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/

Knowledge check

16.14.a
Kubernetes lets you create users directly into LDAP
True
x False

16.14.b
Kubernetes give you network isolation between namespaces out of the box
True
x False

16.14.c
What do we need to do in order to enforce a policy for our pods?
a) Write a script to check the cgroups and namespaces
x b) Creat a Pod Security Policy
c) Do not use pods in the first place

16.14.d
RBAC stands for
a) Role Backoff Admission Control
b) Registry Balanced Accounting Certificate
x c) Role Based Access Control

16.14.e
Which of the following are not valid Kubernetes
a) RBAC
x b) BABAC
c) ABAC
x d) RABAC

16.14.f
We can specify egress rules with network policies
True
xFalse

